# Azure DevOps pipeline to build, check source codes and run tests.
#
# To make Danger JS run on a pull request you need to add the following pipeline 
# variable and set it with a GitHub access token (scope public_repo); otherwise 
# set its value to 'skip' without marking it secret: 
# - DANGER_GITHUB_API_TOKEN
# 

variables:
  NODE_VERSION: '18.18.1'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

# Automatically triggered on PR
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pr-trigger
trigger:
  branches:
    include:
    - main
    - develop

# Execute agents (jobs) on latest Ubuntu version.
# To change OS for a specific, ovverride "pool" attribute inside the job definition
pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v19
      endpoint: 'io-azure-devops-github-ro'
      
    - repository: wallet-be-mock
      type: github
      name: pagopa/pagopa-wallet-be-mock
      ref: main
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: Build
    dependsOn: []
    jobs:
      - job: make_build  
        pool:
          vmImage: 'ubuntu-latest'  
        steps:
        - template: templates/node-job-setup/template.yaml@pagopaCommons

        - template: azure-templates/setup-env.yml
          parameters:
            env: 'DEV'
            api_host: 'https://api.dev.platform.pagopa.it'
            api_wallet_basepath: '/webview-payment-wallet/v1'
            api_pm_basepath: '/pp-restapi-CD'
            api_timeout:  10000
            npg_sdk_url: 'https://stg-ta.nexigroup.com/monetaweb/resources/hfsdk.js'
            wallet_show_continue_io_btn_delay_millis: 2000
    
        - script: |
            yarn build
          displayName: 'Build'
  
  - stage: Static_Analysis
    dependsOn: []
    jobs:
      - job: lint     
        steps:
        - template: templates/node-job-setup/template.yaml@pagopaCommons
        - script: yarn lint
          displayName: 'Lint'

  # B) Run unit tests if there is a push or pull request on any branch.
  - stage: Unit_Tests
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: []
    jobs:
      
      - job: run_unit_tests
        steps:
        
        - template: templates/node-job-setup/template.yaml@pagopaCommons
        
        - task: SonarCloudPrepare@1
          displayName: 'Prepare SonarCloud analysis configuration'
          inputs:
            SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
            organization: '$(SONARCLOUD_ORG)'
            scannerMode: CLI
            extraProperties: |
              sonar.projectKey=$(SONARCLOUD_PROJECT_KEY)
              sonar.projectName=$(SONARCLOUD_PROJECT_NAME)

        - template: azure-templates/setup-env.yml
          parameters:
            env: 'TEST'
            api_host: 'https://api.dev.platform.pagopa.it'
            api_wallet_basepath: '/webview-payment-wallet/v1'
            api_pm_basepath: '/pp-restapi-CD'
            npg_sdk_url: 'https://stg-ta.nexigroup.com/monetaweb/resources/hfsdk.js'
            api_wallet_outcome_basepath: '/payment-wallet-outcomes/v1'
            api_webview_pm_hostname: 'https://api.dev.platform.pagopa.it'
            wallet_pagopa_logos_cdn: 'https://assets.cdn.io.italia.it/logos/abi'

        - script: yarn generate
          displayName: 'Generate definitions'

        - script: yarn test:coverage
          displayName: 'Unit tests exec'

        - task: SonarCloudAnalyze@1
          displayName: 'Run SonarCloud analysis'
          
        - task: SonarCloudPublish@1
          displayName: 'Publish SonarCloud results on build summary'
          inputs:
            pollingTimeoutSec: '300' 
        - task: PublishTestResults@2
          displayName: 'Publish test results from Jest tests'
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/*TEST.xml' 
            searchFolder: '$(System.DefaultWorkingDirectory)'
            failTaskOnFailedTests: true

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage from Jest tests'
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: 'coverage/cobertura-coverage.xml'      

  # B) Run integration tests if there is a push or pull request on any branch.
  - stage: Integration_Tests
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: []
    jobs:
      - job: run_integration_tests
        timeoutInMinutes: 30
        steps:

        - checkout: wallet-be-mock

        # Currently npg api key is not required for current integration test
        - script: |
            cp env.example .env
            sed -i "s/^NPG_API_KEY=.*$/NPG_API_KEY=key/" .env
          workingDirectory: pagopa-wallet-be-mock
          displayName: 'Setup env for mock'

        - script: yarn global add node-gyp && yarn install && yarn generate && yarn build
          workingDirectory: pagopa-wallet-be-mock
          displayName: 'Setup deps for mock'

        - script: |
            nohup yarn start &
          displayName: 'Start backend mock'
          workingDirectory: pagopa-wallet-be-mock

        - checkout: self

        - template: templates/node-job-setup/template.yaml@pagopaCommons
          parameters:
           projectDir: pagopa-wallet-fe

        - script: |
            export $(grep -v '^#' .env.development | xargs)
          displayName: 'export envs from .env.development'
          workingDirectory: pagopa-wallet-fe

        - script: |
            yarn dev &
          displayName: 'Start wallet fe'
          workingDirectory: pagopa-wallet-fe
          
        - script: |
            yarn dev:env:noredirect &
          displayName: 'Set wallet fe with noredirect env'
          workingDirectory: pagopa-wallet-fe

        - script: yarn test:noredirect
          displayName: 'IO noredirect button Integration tests exec'
          workingDirectory: pagopa-wallet-fe

        - task: PublishTestResults@2
          displayName: 'Publish integration tests results from Jest tests'
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/*TEST.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)'
            failTaskOnFailedTests: true

